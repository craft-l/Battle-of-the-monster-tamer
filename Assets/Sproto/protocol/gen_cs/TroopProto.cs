// Generated by sprotodump. DO NOT EDIT!
// source: D:\unity\project\BattleOfTheMonsterTamer\Assets\Sproto\protocol\/TroopProto.sproto

using System;
using Sproto;
using System.Collections.Generic;

namespace SprotoType { 
	public class Troop : SprotoTypeBase {
		private static int max_field_count = 4;
		
		
		private Int64 _id; // tag 0
		public Int64 id {
			get { return _id; }
			set { base.has_field.set_field (0, true); _id = value; }
		}
		public bool HasId {
			get { return base.has_field.has_field (0); }
		}

		private double _x; // tag 1
		public double x {
			get { return _x; }
			set { base.has_field.set_field (1, true); _x = value; }
		}
		public bool HasX {
			get { return base.has_field.has_field (1); }
		}

		private double _y; // tag 2
		public double y {
			get { return _y; }
			set { base.has_field.set_field (2, true); _y = value; }
		}
		public bool HasY {
			get { return base.has_field.has_field (2); }
		}

		private double _z; // tag 3
		public double z {
			get { return _z; }
			set { base.has_field.set_field (3, true); _z = value; }
		}
		public bool HasZ {
			get { return base.has_field.has_field (3); }
		}

		public Troop () : base(max_field_count) {}

		public Troop (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.id = base.deserialize.read_integer ();
					break;
				case 1:
					this.x = base.deserialize.read_double ();
					break;
				case 2:
					this.y = base.deserialize.read_double ();
					break;
				case 3:
					this.z = base.deserialize.read_double ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.id, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_double (this.x, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_double (this.y, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_double (this.z, 3);
			}

			return base.serialize.close ();
		}
	}


	public class get_troop_target {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Troop _troop; // tag 0
			public Troop troop {
				get { return _troop; }
				set { base.has_field.set_field (0, true); _troop = value; }
			}
			public bool HasTroop {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.troop = base.deserialize.read_obj<Troop> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_obj (this.troop, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Troop _troop_list; // tag 0
			public Troop troop_list {
				get { return _troop_list; }
				set { base.has_field.set_field (0, true); _troop_list = value; }
			}
			public bool HasTroop_list {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.troop_list = base.deserialize.read_obj<Troop> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_obj (this.troop_list, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class package : SprotoTypeBase {
		private static int max_field_count = 2;
		
		
		private Int64 _type; // tag 0
		public Int64 type {
			get { return _type; }
			set { base.has_field.set_field (0, true); _type = value; }
		}
		public bool HasType {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _session; // tag 1
		public Int64 session {
			get { return _session; }
			set { base.has_field.set_field (1, true); _session = value; }
		}
		public bool HasSession {
			get { return base.has_field.has_field (1); }
		}

		public package () : base(max_field_count) {}

		public package (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.type = base.deserialize.read_integer ();
					break;
				case 1:
					this.session = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.type, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.session, 1);
			}

			return base.serialize.close ();
		}
	}


}


public class Protocol : ProtocolBase {
	public static  Protocol Instance = new Protocol();
	private Protocol() {
		Protocol.SetProtocol<get_troop_target> (get_troop_target.Tag);
		Protocol.SetRequest<SprotoType.get_troop_target.request> (get_troop_target.Tag);
		Protocol.SetResponse<SprotoType.get_troop_target.response> (get_troop_target.Tag);

	}

	public class get_troop_target {
		public const int Tag = 1;
	}

}